{"version":3,"sources":["redux/todos.tsx","contexts/Theme.tsx","components/UpdateTodo/UpdateTodo.tsx","components/TodoList/TodoList.tsx","components/TodoList/index.tsx","components/AddTodo/AddTodo.tsx","components/AddTodo/index.tsx","route.tsx","components/App/index.tsx","components/App/App.tsx","redux/index.tsx","serviceWorker.js","index.tsx"],"names":["initState","posts","localStorage","getItem","JSON","parse","themes","light","color","backgroundColor","borderColor","borderTop","dark","ThemeContext","createContext","theme","changeTheme","dayjs","locale","UpdateTodo","editIndex","callback","useState","input","setInput","isValid","isInvalid","inputStatus","setInputStatus","dispatch","useDispatch","Form","onSubmit","event","preventDefault","type","index","text","Group","InputGroup","className","FormControl","placeholder","value","onChange","target","Append","Button","variant","Control","Feedback","onClick","DefaultButton","styled","button","CheckBoxLabel","completed","style","textDecoration","TodoList","useContext","Theme","isEditing","editId","editStatus","setEditStatus","useSelector","state","todos","length","map","item","ListGroup","Item","key","id","Check","custom","label","inline","checked","handleEdit","createdAt","AddTodo","format","default","margin","active","noSelect","userSelect","MyRoute","React","Navbar","bg","expand","Brand","Nav","activeStyle","to","path","Row","Col","md","span","App","nowTheme","setNowTheme","Provider","Object","is","Container","fluid","combineReducers","action","newPosts","post","lastPostId","undefined","push","newData","setItem","stringify","filter","filterData","updateCompleteData","updateData","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","store","createStore","rootReducer","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.7b09cf5c.chunk.js","sourcesContent":["const ADD_TODO = 'ADD_TODO';\nconst UPDATE_TODO = 'UPDATE_TODO';\nconst DELETE_TODO = 'DELETE_TODO';\nconst UPDATE_TODO_COMPLETE = 'UPDATE_TODO_COMPLETE';\n\nexport interface Post {\n  id: number;\n  text: string;\n  completed: boolean;\n  createdAt: string;\n}\n\nexport interface PostState {\n  posts: Post[];\n}\n\nexport interface AddTodoAction {\n  type: typeof ADD_TODO;\n  text: string;\n  createdAt: string;\n}\n\nexport interface UpdateTodoAction {\n  type: typeof UPDATE_TODO;\n  text: string;\n  index: number;\n}\n\nexport interface UpdateTodoCompleteAction {\n  type: typeof UPDATE_TODO_COMPLETE;\n  id: number;\n}\n\nexport interface DeleteTodoAction {\n  type: typeof DELETE_TODO;\n  id: number;\n}\n\nexport interface RootState {\n  todos: PostState;\n}\n\ntype TodoAction = AddTodoAction | UpdateTodoAction | UpdateTodoCompleteAction | DeleteTodoAction\n\nconst initState = ((): PostState => {\n  const posts = localStorage.getItem('posts');\n  return posts === null ? { posts: [] } : JSON.parse(posts);\n})();\n\nexport function todos(state = initState, action: TodoAction): PostState {\n  if (action.type === ADD_TODO) {\n    const newPosts = state.posts.map((post) => post);\n    let lastPostId = 1;\n    if (state.posts[state.posts.length - 1] !== undefined) {\n      lastPostId = state.posts[state.posts.length - 1].id + 1;\n    }\n    newPosts.push({\n      text: action.text,\n      id: lastPostId,\n      completed: false,\n      createdAt: action.createdAt,\n    });\n\n    const newData = { ...state, posts: newPosts };\n    localStorage.setItem('posts', JSON.stringify(newData));\n\n    return newData;\n  }\n  if (action.type === DELETE_TODO) {\n    const filter = state.posts.filter((post) => action.id !== post.id);\n    const filterData = { ...state, posts: filter };\n    localStorage.setItem('posts', JSON.stringify(filterData));\n\n    return filterData;\n  }\n\n  if (action.type === UPDATE_TODO_COMPLETE) {\n    const updateCompleteData = {\n      ...state,\n      posts: state.posts.map(\n        (item) => (item.id === action.id ? { ...item, completed: !item.completed } : item),\n      ),\n    };\n    localStorage.setItem('posts', JSON.stringify(updateCompleteData));\n\n    return updateCompleteData;\n  }\n\n  if (action.type === UPDATE_TODO) {\n    const updateData = {\n      ...state,\n      posts: state.posts.map(\n        (post, index: number) => (index !== action.index ? post : { ...post, text: action.text }),\n      ),\n    };\n    localStorage.setItem('posts', JSON.stringify(updateData));\n\n    return updateData;\n  }\n\n  return state;\n}\n\nexport const addTodo = (text: string, time: string): AddTodoAction => ({\n  type: ADD_TODO,\n  createdAt: time,\n  text,\n});\n\nexport const deleteTodo = (id: number): DeleteTodoAction => ({\n  type: DELETE_TODO,\n  id,\n});\n\nexport const updateTodoComplete = (id: number): UpdateTodoCompleteAction => ({\n  type: UPDATE_TODO_COMPLETE,\n  id,\n});\n\nexport const updateTodo = (index: number, text: string): UpdateTodoAction => ({\n  type: UPDATE_TODO,\n  index,\n  text,\n});\n","import { createContext } from 'react';\n\nexport interface Theme {\n  color?: string;\n  backgroundColor?: string;\n  borderColor?: string;\n  borderTop?: string;\n}\n\nexport type Themes = {\n  dark: Theme;\n  light: Theme;\n};\n\nexport const themes: Themes = {\n  light: {\n    color: '#000000',\n    backgroundColor: '#eeeeee',\n    borderColor: '#000000',\n    borderTop: '1px solid #000000',\n  },\n  dark: {\n    color: '#ffffff',\n    backgroundColor: '#343A40',\n    borderColor: '#eeeeee',\n  },\n};\n\nconst change = (): void => {\n  //\n};\nexport type ThemeContextProps = { theme: Theme; changeTheme: () => void };\nconst ThemeContext = createContext<ThemeContextProps>({ theme: themes.dark, changeTheme: change });\n\nexport default ThemeContext;\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport Button from 'react-bootstrap/Button';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport FormControl from 'react-bootstrap/FormControl';\nimport Form from 'react-bootstrap/Form';\nimport dayjs from 'dayjs';\nimport 'dayjs/locale/zh-tw';\nimport { updateTodo } from '../../redux/todos';\n\ndayjs.locale('zh-tw');\n\ninterface InputStatus {\n  isValid: boolean;\n  isInvalid: boolean;\n}\n\ninterface EditCallback {\n  (): void;\n}\n\nconst UpdateTodo = (\n  { editIndex, callback }: { editIndex: number; callback: EditCallback },\n): JSX.Element => {\n  const [input, setInput] = useState<string>('');\n  const [inputStatus, setInputStatus] = useState<InputStatus>({\n    isValid: false,\n    isInvalid: false,\n  });\n  const dispatch = useDispatch();\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>): void => {\n    event.preventDefault();\n    if (!input) {\n      setInputStatus({ isValid: false, isInvalid: true });\n      return;\n    }\n    dispatch(updateTodo(editIndex, input));\n    setInput('');\n    setInputStatus({ isValid: false, isInvalid: false });\n    callback();\n  };\n\n  const handleInput = (event: React.ChangeEvent<HTMLInputElement>): void => {\n    setInput(event.target.value);\n    const isValid = event.target.value !== '';\n    setInputStatus({ isValid, isInvalid: !isValid });\n  };\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Form.Group>\n        <InputGroup className=\"mb-3\">\n          <FormControl\n            placeholder=\"Type any todo text..\"\n            type=\"text\"\n            value={input}\n            isValid={inputStatus.isValid}\n            isInvalid={inputStatus.isInvalid}\n            onChange={handleInput}\n          />\n          <InputGroup.Append>\n            <Button variant=\"outline-secondary\" type=\"submit\">儲存</Button>\n          </InputGroup.Append>\n          <Form.Control.Feedback type=\"invalid\">\n            <h6>請輸入文字</h6>\n          </Form.Control.Feedback>\n        </InputGroup>\n      </Form.Group>\n      <Button variant=\"outline-secondary\" type=\"button\" onClick={(): void => { callback(); }}>取消</Button>\n    </Form>\n  );\n};\n\nexport default UpdateTodo;\n","import React, { useContext, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Form from 'react-bootstrap/Form';\nimport styled from 'styled-components';\nimport { FaTimes, FaRegClock, FaEdit } from 'react-icons/fa';\nimport { deleteTodo, updateTodoComplete, RootState } from '../../redux/todos';\nimport Theme from '../../contexts/Theme';\nimport UpdateTodo from '../UpdateTodo/UpdateTodo';\n\ninterface EditStatus {\n  isEditing: boolean;\n  editId: number | null;\n}\n\ninterface TodoListFormatter {\n  (): JSX.Element;\n}\n\nconst DefaultButton = styled.button`\n  background: none;\n  color: inherit;\n  border: none;\n  padding: 0;\n  font: inherit;\n  cursor: pointer;\n  outline: inherit;\n`;\n\nconst TodoList: TodoListFormatter = (): JSX.Element => {\n  const { theme } = useContext(Theme);\n  const [editStatus, setEditStatus] = useState<EditStatus>({\n    isEditing: false,\n    editId: null,\n  });\n  const posts = useSelector((state: RootState) => state.todos.posts);\n  const dispatch = useDispatch();\n  const handleEdit = (index: number): void => {\n    setEditStatus({ editId: index, isEditing: true });\n  };\n  return (\n    <>\n      {\n        posts.length\n          ? posts.map((item, index: number) => (\n            <ListGroup.Item variant=\"success\" style={theme} key={item.id} className=\"mb-2\">\n              {\n                (editStatus.editId === index && editStatus.isEditing) ? (\n                  <UpdateTodo\n                    editIndex={index}\n                    callback={(): void => {\n                      setEditStatus({ editId: index, isEditing: false });\n                    }}\n                  />\n                ) : (\n                  <>\n                    <div className=\"d-flex justify-content-between align-items-center\">\n                      <div>\n                        <Form.Check\n                          type=\"checkbox\"\n                          custom\n                          label={<CheckBoxLabel completed={item.completed} text={item.text} />}\n                          inline\n                          id={`todo-checkbox-${item.id}`}\n                          checked={item.completed}\n                          onChange={(): void => { dispatch(updateTodoComplete(item.id)); }}\n                        />\n                      </div>\n                      <h3><FaTimes onClick={(): void => { dispatch(deleteTodo(item.id)); }} /></h3>\n                    </div>\n                    <hr style={theme} />\n                    <div className=\"d-flex justify-content-between\">\n                      <div>\n                        <DefaultButton type=\"button\" onClick={(): void => { handleEdit(index); }}>\n                          <h6>\n                            <FaEdit />\n                            編輯\n                          </h6>\n                        </DefaultButton>\n                      </div>\n                      <div className=\"text-right\">\n                        <FaRegClock />\n                        <small className=\"ml-1\">\n                          {item.createdAt}\n                        </small>\n                      </div>\n                    </div>\n                  </>\n                )\n              }\n            </ListGroup.Item>\n          )) : (\n            <div className=\"d-flex justify-content-center\">\n              <h2>No Todos</h2>\n            </div>\n          )\n      }\n    </>\n  );\n};\n\nconst CheckBoxLabel = ({ completed, text }: { completed: boolean; text: string }): JSX.Element => (\n  <span style={{ textDecoration: (completed ? 'line-through' : '') }}>{text}</span>\n);\n\nexport default TodoList;\n","import TodoList from './TodoList';\n\nexport default TodoList;\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport Button from 'react-bootstrap/Button';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport FormControl from 'react-bootstrap/FormControl';\nimport Form from 'react-bootstrap/Form';\nimport dayjs from 'dayjs';\nimport 'dayjs/locale/zh-tw';\nimport { addTodo } from '../../redux/todos';\n\ndayjs.locale('zh-tw');\n\ninterface InputStatus {\n  isValid: boolean;\n  isInvalid: boolean;\n}\n\ninterface AddTodoComponent {\n  (): JSX.Element;\n}\n\nconst AddTodo: AddTodoComponent = (): JSX.Element => {\n  const [input, setInput] = useState<string>('');\n  const [inputStatus, setInputStatus] = useState<InputStatus>({\n    isValid: false,\n    isInvalid: false,\n  });\n  const dispatch = useDispatch();\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>): void => {\n    event.preventDefault();\n    if (!input) {\n      setInputStatus({ isValid: false, isInvalid: true });\n      return;\n    }\n    dispatch(addTodo(input, dayjs().format('YYYY-MM-DD HH:mm:ss')));\n    setInput('');\n    setInputStatus({ isValid: false, isInvalid: false });\n  };\n\n  const handleInput = (event: React.ChangeEvent<HTMLInputElement>): void => {\n    setInput(event.target.value);\n    const isValid: boolean = event.target.value !== '';\n    setInputStatus({ isValid, isInvalid: !isValid });\n  };\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Form.Group>\n        <InputGroup className=\"mb-3\">\n          <FormControl\n            placeholder=\"Type any todo text..\"\n            type=\"text\"\n            value={input}\n            isValid={inputStatus.isValid}\n            isInvalid={inputStatus.isInvalid}\n            onChange={handleInput}\n          />\n          <InputGroup.Append>\n            <Button variant=\"outline-secondary\" type=\"submit\">Add</Button>\n          </InputGroup.Append>\n          <Form.Control.Feedback type=\"invalid\">\n            <h6>請輸入文字</h6>\n          </Form.Control.Feedback>\n        </InputGroup>\n      </Form.Group>\n    </Form>\n  );\n};\n\nexport default AddTodo;\n","import AddTodo from './AddTodo';\n\nexport default AddTodo;\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  NavLink,\n} from 'react-router-dom';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport TodoList from './components/TodoList';\nimport AddTodo from './components/AddTodo';\nimport Theme from './contexts/Theme';\n\ninterface Style {\n  [propName: string]: object;\n}\n\nconst style: Style = {\n  default: {\n    textDecoration: 'none',\n    color: 'grey',\n    margin: '5px 10px 5px 10px',\n  },\n  active: {\n    color: 'white',\n  },\n  noSelect: {\n    userSelect: 'none',\n  },\n};\n\nfunction MyRoute(): JSX.Element {\n  const { theme, changeTheme } = React.useContext(Theme);\n  return (\n    <Router>\n      <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\">\n        <Navbar.Brand style={style.noSelect}>Todo List</Navbar.Brand>\n        <Nav>\n          <Nav.Item><NavLink style={style.default} activeStyle={style.active} to=\"/add\">Add Todo</NavLink></Nav.Item>\n          <Nav.Item><NavLink style={style.default} activeStyle={style.active} to=\"/post\">Todos</NavLink></Nav.Item>\n          <Nav.Item style={theme} onClick={(): void => { changeTheme(); }}>Color</Nav.Item>\n        </Nav>\n      </Navbar>\n      <Switch>\n        <Route path=\"/add\">\n          <Row className=\"justify-content-center mt-5\">\n            <Col md={{ span: 5 }}>\n              <AddTodo />\n            </Col>\n          </Row>\n        </Route>\n        <Route path=\"/post\">\n          <Row className=\"justify-content-center mt-5\">\n            <Col md={{ span: 5 }}>\n              <TodoList />\n            </Col>\n          </Row>\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default MyRoute;\n","import App from './App';\n\nexport default App;\n","import React, { useContext, useState } from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Container from 'react-bootstrap/Container';\nimport Col from 'react-bootstrap/Col';\nimport MyRouter from '../../route';\nimport Theme, { themes } from '../../contexts/Theme';\n\ninterface AppComponent {\n  (): JSX.Element;\n}\n\nconst App: AppComponent = (): JSX.Element => {\n  const { theme } = useContext(Theme);\n  const [nowTheme, setNowTheme] = useState(theme);\n\n  const changeTheme = (): void => {\n    if (Object.is(nowTheme, themes.dark)) {\n      setNowTheme(themes.light);\n    } else {\n      setNowTheme(themes.dark);\n    }\n  };\n\n  return (\n    <Theme.Provider value={{ theme: nowTheme, changeTheme }}>\n      <Container fluid>\n        <Row>\n          <Col>\n            <MyRouter />\n          </Col>\n        </Row>\n      </Container>\n    </Theme.Provider>\n  );\n};\n\nexport default App;\n","import { combineReducers } from 'redux';\nimport { todos } from './todos';\n\nexport default combineReducers({\n  todos,\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport App from './components/App/index';\nimport rootReducer from './redux/index';\nimport './styles/index.scss';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}